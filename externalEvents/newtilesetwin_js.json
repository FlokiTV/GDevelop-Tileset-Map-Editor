{
  "associatedLayout": "New scene",
  "lastChangeTimeStamp": 0,
  "name": "NewTilesetWin_JS",
  "events": [
    {
      "disabled": false,
      "folded": false,
      "type": "BuiltinCommonInstructions::JsCode",
      "inlineCode": "const DOM   = gdjs._json2html\nconst $DOM  = gdjs._DOMapi\nconst $WIN  = gdjs._windowManager\nconst $TILE = gdjs._TileSetMapEditor\nwindow._winManager.previewTile = {\n    title:'preview tile',\n    id:'preview-tile',\n    pos:{\n        left: \"50%\",\n        top: \"50%\",\n    },\n    content:[\n        DOM.newEl('img',{\n            ref:'preview-tile'\n        }),\n        BULMA.form.field({\n            html:[\n                BULMA.form.control({ ref:'preview-tile-size', html: [\n                    DOM.newEl(\"input\", { type: 'range', step:1, min:1, max:5, value: 1,\n                    style:'width:100%',\n                    onchange: function(){\n                        const image = $($DOM.selectElbyRef('preview-tile'))\n                        const size  = parseInt(image.attr('data-size'))\n                        image.attr('style',`width:${size*$(this).val()}px; image-rendering: pixelated; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges;`)\n                    }})\n                ] })\n            ]\n        })\n    ]\n\n}\n\nwindow._winManager.tileset = {\n    title:'create new tileset',\n    id: 'create_new_tileset',\n    content:[\n        DOM.newEl(\"style\",{\n            html:`\n                .tile-preview{\n                    position: absolute;\n                    width: 100%;\n                    height: 100%;\n                }\n                .tile-preview div{\n                    width: 32px;\n                    height: 32px;\n                    outline: 1px solid rgba(255,0,0,0.1);\n                    float:left;\n                    position: relative;\n                }\n                .tile-preview div:hover{\n                    outline: 1px solid rgba(255,0,0,1);\n                }\n                .tile-preview div:hover:after{\n                    opacity: 1\n                }\n                .tile-preview div:after {\n                    opacity: 0;\n                    content: attr(data-pos);\n                    background: rgba(255,0,0,1);\n                    color: #fff;\n                    font-size: 10px;\n                    left: 0;\n                    top: 0;\n                    position: absolute;\n                    padding: 1px 2px;\n                }\n                .tile-container{\n                    position:relative;\n                    overflow: auto;\n                    outline: 1px solid rgba(0,0,0,0.1);\n                }\n            `\n        }),\n        BULMA.form.field({\n            html:[\n                BULMA.form.control({ html: [ BULMA.form.input({ \n                        ref:'tile-name', placeholder:'tileset name', value:'tileset',\n                        onready: function(){\n                            let now = Date.now().toString()\n                            $(this).val(\"tileset_\"+ now.substr(now.length - 5))\n                            $(this).on(\"change\", function(){\n                                let now = Date.now().toString()\n                                if($(this).val() == \"\")\n                                    $(this).val(\"tileset_\"+now.substr(now.length - 5))\n                            })\n                        }\n                    }, 'is-small') ] \n                }),\n                BULMA.form.control({ html: [ BULMA.form.input({ \n                    ref:'tile-size',\n                    placeholder: 'tileset size',\n                    value: 32, \n                    onready: function(){\n                        $DOM.once($(this), EL =>{\n                            $(EL).change(function(){\n                                $(this).val(32)\n                                gdjs._windowManager.newWindow(window._winManager.alert(\"Sorry\", [ DOM.newEl('p', { class:'has-text-centered has-text-white', text:'For now this editor only suport 32x32 tiles' }) ]))\n                            })\n                        })\n                    }\n                }, 'is-small') ] })\n            ]\n        }, 'has-addons'),\n        BULMA.form.field({\n            html:[\n                BULMA.form.control({ html: [ BULMA.form.input({ ref:'tile-src', placeholder:'tileset URL' }, 'is-small') ] }, 'is-expanded'),\n                BULMA.form.control({ html: [\n                    BULMA.button({ \n                        text: 'preview',\n                        onready: function(){\n                            $DOM.once($(this), EL=>{\n                                DOM.setupListeners(this)\n                                const name    = $($DOM.selectElbyRef('tile-name'))\n                                const size    = $($DOM.selectElbyRef('tile-size'))\n                                const src     = $($DOM.selectElbyRef('tile-src'))\n                                const image   = $($DOM.selectElbyRef('tile-image'))\n                                $(this).click(function(){\n                                    image.attr('src', src.val())\n                                    $(this).parent().parent().parent().find('.is-hidden').removeClass('is-hidden')\n                                })\n                            })\n                        }\n                    }, 'is-info is-small') \n                ]})\n            ]\n        }, 'has-addons'),\n        DOM.newEl(\"div\",{\n            class: 'tile-container is-hidden',\n            html:[\n                DOM.newEl(\"div\",{\n                    ref:\"tile-preview\",\n                    class:\"tile-preview\",\n                }),\n                DOM.newEl(\"img\",{\n                    ref:\"tile-image\",\n                    onready: function(){\n                        const preview   = $($DOM.selectElbyRef('tile-preview'))\n                        const IMAGE     = $(this)[0]\n                        IMAGE.crossOrigin = \"anonymous\"\n                        $(IMAGE).on('load', ()=> {\n                            let w = IMAGE.naturalWidth\n                            let h = IMAGE.naturalHeight\n                            //let TXT = new PIXI.BaseTexture(IMAGE);\n                            $($DOM.selectElbyRef('tile-info-image-size')).text(`image size: ${w}x${h}`)\n                            \n                            $(IMAGE).attr('style', `width: ${w}px!important; max-width: ${w}px!important`)\n                            $(preview).attr('style', `width: ${w}px!important; max-width: ${w}px!important`)\n                            let grid = {\n                                x: new Array(parseInt(w/32)),\n                                y: new Array(parseInt(h/32)),\n                            }\n                            //clear preview\n                            $(preview).html(\"\")\n                            $TILE._previewTiles = []\n                            $TILE.__previewSize.x = grid.x.length\n                            $TILE.__previewSize.y = grid.y.length\n                            for (var i = 0; i < grid.y.length; i++) {\n                                for (var ii = 0; ii < grid.x.length; ii++) {\n                                    $(preview).json2html({}, DOM.newEl('div',{\n                                        onready: function(){\n                                            const pos = $(this).position()\n                                            $(this).attr('data-pos',`${pos.left/32}:${pos.top/32}`)\n                                            /*\n                                                Setup sprite\n                                                // let rect    = new PIXI.Rectangle(pos.left, pos.top, 32, 32);\n                                                // let txt     = new PIXI.Texture(TXT, rect);\n                                            */\n                                            const canvas = document.createElement(\"canvas\");\n                                            canvas.width = 32;\n                                            canvas.height = 32;\n                                            const context = canvas.getContext(\"2d\");\n                                            context.drawImage(\n                                                IMAGE,\n                                                pos.left,\n                                                pos.top,\n                                                32,32,\n                                                0,0,\n                                                32,32\n                                            )\n                                            $TILE._previewTiles.push({\n                                                grid:{\n                                                    x: pos.left/32,\n                                                    y:pos.top/32\n                                                },\n                                                data: canvas.toDataURL(),\n                                            })\n                                            //onclick preview\n                                            $(this).click(function(){\n                                                /*\n                                                    Check if has openned 'preview-tile'\n                                                */\n                                                let _win = $WIN.getWindow('preview-tile')\n                                                if(_win){\n                                                    const image = $($DOM.selectElbyRef('preview-tile'))\n                                                    image.attr('src', canvas.toDataURL())\n                                                    image.attr('data-size', '32')\n                                                }else{\n                                                    let prevWin = window._winManager.previewTile\n                                                    prevWin.size = {\n                                                        width: (32*5)+'px'\n                                                    }\n                                                    prevWin.onready = function(win){\n                                                        const image   = $($DOM.selectElbyRef('preview-tile'))\n                                                        image.attr('src', canvas.toDataURL())\n                                                        image.attr('data-size', '32')\n                                                    }\n                                                    gdjs._windowManager.newWindow(prevWin)\n                                                }\n                                                \n                                            })\n                                            //onclick\n                                        }\n                                    }))\n                                } // - FOR X\n                            } // - FOR Y\n                            $($DOM.selectElbyRef('tile-info-total-tiles')).text(`total tiles: ${$TILE._previewTiles.length}`)\n                            $($DOM.selectElbyRef('tile-info-selected-tiles')).text(`selected tiles: ${$TILE._previewTiles.length}`)\n                        })\n                    }\n                }) \n            ]\n        }),\n        DOM.newEl(\"p\",{\n            ref:'tile-info-size',\n            class: 'is-hidden',\n            html: [\n                DOM.newEl(\"style\", { html : `\n                    [ref='tile-info-size']{\n                        display:flex\n                    }\n                    [ref='tile-info-size']\n                    span{\n                        margin: 1px 2px;\n                        display: block;\n                        color: #fff\n                    }\n                ` }),\n                DOM.newEl(\"span\", { ref: 'tile-info-sprite-size', text: 'sprite size: 32x32' }),\n                DOM.newEl(\"span\", { ref: 'tile-info-image-size', text: 'image size: 0x0' }),\n                DOM.newEl(\"span\", { ref: 'tile-info-total-tiles', text: 'total tiles: 0' }),\n                DOM.newEl(\"span\", { ref: 'tile-info-selected-tiles', text: 'selected tiles: 0' }),\n            ],\n            // class:'is-small is-pulled-right'\n        }),\n        BULMA.buttons({\n            html:[\n                BULMA.button({ \n                    text: 'export as sprite',\n                    onready: function(){\n                        $(this).click(function(){\n                            let name = $($DOM.selectElbyRef('tile-name')).val() || 'tileset' // get tile name\n                            let win = $WIN.getWindow('create_new_tileset')\n                            if(!gdjs._TileSetMapEditor._previewTiles.length){\n                                gdjs._windowManager.newWindow(\n                                    window._winManager.alert(\"Alert\", [ \n                                        DOM.newEl('p', { class:'has-text-centered has-text-white', text:'Load a image to continue' }) \n                                    ]\n                                ))\n                            }else{\n                                gdjs._TileSetMapEditor.preview2resource(name)\n                                $WIN.closeWindow(win.uuid)\n                            }\n                        })\n                    }\n                }, 'is-small is-success is-hidden')\n            ]\n        }, 'is-right')\n    ],\n    // onready: win =>{\n    //     const EL = win.el\n    //     $DOM.once(EL, ()=>{\n    //         $(EL).addClass('win-alert').parent().json2html({}, DOM.newEl('div',{ class: 'alert-background'}))\n    //     })\n    // },\n    // onremove: win =>{\n    //     console.log(\"remove\")\n    //     $('.alert-background').remove()\n    // }\n}",
      "parameterObjects": "",
      "useStrict": true,
      "eventsSheetExpanded": true
    }
  ]
}